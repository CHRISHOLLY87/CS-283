# Specify the name of the executable file and store it in the variable PROG
PROG=	test

# Specify the objects that the final executable will depend on
OBJS=	one.o main.o two.o three.o

# By not specifying the C flags, no debugging information is generated by
# the C compiler, or warning flags. So the GDB debugger can not be used when
# running the c programs that are created in this makefile. Similarly,
# warnings will not be output to the console. 
#CFLAGS=	-Wall -g

# Specify a target called "all" that depends on the target specified by the
# variable PROG
all: ${PROG}

# The target specified by the variable PROG depends on all of the object
# files specified in the OBJS variable. By putting the object files in the
# dependency list, make knows it must compile the .c versions individually,
# and then build the executable after
${PROG}: ${OBJS}
	# Print that the executable "test" ($@ which is the target) depends on
	# the object files ($? which is the dependency list).
	@echo $@ depends on $?

	# Compile each of the object files into an executable
	${CC} ${LDFLAGS} ${OBJS} -o ${PROG}

# Create a target to clean all of the files created by the makefile
clean:
	# Remove all of the files created by the makefile
	rm -f ls *.o test
